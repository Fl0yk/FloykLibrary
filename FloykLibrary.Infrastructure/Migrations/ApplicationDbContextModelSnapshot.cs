// <auto-generated />
using System;
using FloykLibrary.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FloykLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FloykLibrary.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Country = "Россия",
                            DateOfBirth = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Лев",
                            Surname = "Толстой"
                        },
                        new
                        {
                            Id = new Guid("34f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Country = "Англия",
                            DateOfBirth = new DateTime(1960, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Нил",
                            Surname = "Гейман"
                        },
                        new
                        {
                            Id = new Guid("33f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Country = "Россия",
                            DateOfBirth = new DateTime(1948, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Терри",
                            Surname = "Пратчетт"
                        });
                });

            modelBuilder.Entity("FloykLibrary.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturningBook")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TakingBook")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("ISBN");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Description = "В книгу вошли первый и второй тома романа «Война и мир» – одного из самых знаменитых произведений литературы XIX века.",
                            Genre = "Роман",
                            ISBN = "5170064004",
                            Title = "Война и мир. Книга 1"
                        },
                        new
                        {
                            Id = new Guid("24f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Description = "«Мертвые души» — гениальное произведение Николая Васильевича Гоголя, учебник жизни и ключ к пониманию характеров и типажей нашего общества. Сам автор определил жанр произведения как поэму.",
                            Genre = "Поэма",
                            ISBN = "5170287402",
                            Title = "Мертвые души"
                        },
                        new
                        {
                            Id = new Guid("23f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Description = "Книга получила в целом положительные оценки критиков. Роман номинировался на Всемирную премию фэнтези и премию журнала «Локус».",
                            Genre = "Роман",
                            ISBN = "9785041772932",
                            Title = "Благие знамения"
                        });
                });

            modelBuilder.Entity("FloykLibrary.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 1,
                            Name = "client"
                        });
                });

            modelBuilder.Entity("FloykLibrary.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            Email = "admin@mail.ru",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FloykLibrary.Infrastructure.Models.AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("35f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            BookId = new Guid("25f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        },
                        new
                        {
                            AuthorId = new Guid("35f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            BookId = new Guid("24f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        },
                        new
                        {
                            AuthorId = new Guid("34f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            BookId = new Guid("23f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        },
                        new
                        {
                            AuthorId = new Guid("33f010ed-8c38-4eeb-b9ec-5fb56ccf3189"),
                            BookId = new Guid("23f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        });
                });

            modelBuilder.Entity("FloykLibrary.Infrastructure.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = 2,
                            UserId = new Guid("11f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        },
                        new
                        {
                            RoleId = 1,
                            UserId = new Guid("11f010ed-8c38-4eeb-b9ec-5fb56ccf3189")
                        });
                });

            modelBuilder.Entity("FloykLibrary.Domain.Entities.Book", b =>
                {
                    b.HasOne("FloykLibrary.Domain.Entities.User", "User")
                        .WithMany("TakenBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("FloykLibrary.Infrastructure.Models.AuthorBook", b =>
                {
                    b.HasOne("FloykLibrary.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloykLibrary.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloykLibrary.Infrastructure.Models.UserRole", b =>
                {
                    b.HasOne("FloykLibrary.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloykLibrary.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloykLibrary.Domain.Entities.User", b =>
                {
                    b.Navigation("TakenBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
